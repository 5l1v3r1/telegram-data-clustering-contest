,src,lang,text
0,"











Ein Dateisystem, alle Funktionen
Um für möglichst redundante und sichere Daten zu sorgen, ist längst keine teure Hardware mehr nötig. Ein Grund dafür ist das Dateisystem ZFS. Es bietet Snapshots, sichere Checksummen, eigene Raid-Level und andere sinnvolle Funktionen - kann aber zu Anfang überfordern.
04 Nov 2019, 11:05 by Oliver Nickel
Ein möglichst redundantes System für Datensicherheit und Integrität aufzubauen, ist seit einiger Zeit nicht mehr nur eine Sache des richtigen Raid-Verbundes. Auch die Wahl des Dateisystems, mit dem Informationen auf Festplatten und SSDs gespeichert werden, spielt eine große Rolle. Systeme wie Windows und diverse Linux-Distributionen nutzen standardmäßig NTFS respektive Ext4, entsprechend groß ist ihre Verbreitung in der IT.
Sobald es darum geht, Laufwerke mit verschiedenen Methoden vor Datenverlust zu schützen, kommen aber beide genannten Filesysteme an ihre Grenzen. Aus diesem Grund ist im Bereich der Netzwerkspeicher und Serversysteme auch das Zettabyte File System - ZFS - bekannt. Doch was zeichnet dieses im Vergleich zu NTFS und Ext4 aus?
Wir denken: Jeder Administrator muss sich damit auseinandersetzen. Allerdings ist das System mit seinen vielen Möglichkeiten sehr komplex, hat einige Einschränkungen und kann daher schnell verwirren. Golem.de gibt eine Übersicht.
Diverse Funktionen, die Datenredundanz sicherstellen sollen - darunter Snapshots, Copy-on-write oder vom Dateisystem verwaltete Raid-Systeme - gehören zu den Eigenschaften von ZFS. Hier kommt auch ein ähnliches, aber unabhängig entwickeltes Dateisystem ins Spiel: das B-Tree File System, kurz Btrfs.
Für welches der beiden Systeme wir uns entscheiden, hängt dabei eher von unserem genutzten Betriebssystem ab. ZFS wird etwa unter FreeBSD unterstützt, welches auf diversen NAS-Systemen verbreitet ist. Auch das beliebte NAS-OS FreeNAS unterstützt ZFS nativ. Golem.de konnte sich im Eigenbau bereits einen eigenen Netzwerkspeicher damit erstellen. Auch konnten wir das Dateisystem anderweitig ausprobieren.
Wo kommt ZFS her?
Nachdem ZFS als Teil des Betriebssystems Solaris durch Oracle gekauft wurde, stellte das Unternehmen die Lizenz des Dateisystems effektiv von Open Source wieder auf ein proprietäres und geschlossenes Modell um und bot dafür keine weiteren Updates an. Das Konzept wurde daher mit dem Open-Source-Projekt Illumos, das auf Opensolaris basiert, später wieder weiterentwickelt.
Seit 2013 beschäftigt sich das Projekt OpenZFS mit der Weiterentwicklung des Dateisystems. Dabei handelt es sich aber um ein separat erhältliches Paket, das nicht mit der GNU Public License kompatibel ist. Aus diesem Grund ist ZFS zwar mit Linux-Distributionen und auch MacOS kompatibel, wird aber nicht im Linux-Kernel verankert und dort weiterentwickelt. Das System wird derzeit von einer Community gepflegt, die FreeBSD, Linux, MacOS und Windows verwendet.
Raid-Z funktioniert ohne zusätzliche Hardware
Von Grund auf unterscheidet sich ZFS von Dateisystemen wie NTFS und Ext4. Es ist Volume Manager und Dateisystem in einem, kennt also physische Laufwerke des Hostcomputers und deren logische Partitionen. Damit ermöglicht ZFS beispielsweise eine Raid-Funktion, das sogenannte Raid-Z. Dabei handelt es sich im Prinzip um ein herkömmliches Raid 5 oder Raid 6, allerdings mit einem dynamischen Striping. ZFS schreibt einzelne Blöcke immer als ganzen eigenen Stripe. Damit wird Datenverlust während des Schreibvorgangs verhindert, etwa wenn währenddessen ein Laufwerk ausfällt oder das System beschädigt wird.
Einen Raid-Z können Anwender mit beliebig vielen Paritätslaufwerken definieren, etwa mit einer, zwei oder mehr Redundanzen. Das kann beispielsweise dann sinnvoll sein, wenn Anwender keinen Raid-Controller auf dem Mainboard selbst oder einen dedizierten Controller verwenden möchten oder können. Mit ZFS kann dabei auch aus einem simplen JBOD-Array - also einer Ansammlung mehrerer physischer Datenträger - ein vom Anwender einzelnes sichtbares logisches Volume, ein Virtual Device (Vdev), erstellt werden. Meist besteht ein Vdef aus einer einzelnen Festplatte oder SSD. Die Zusammenfassung mehrerer logischen Laufwerke wird in ZFS auch Pool oder Zpool genannt. Sie werden über alle darin definierten physischen Datenträger verteilt in Stripes abgelegt - ähnlich eines RAID-0-Systems. Oracle selbst gibt eine weiterführende Übersicht über die Fachbegriffe von ZFS.
ZFS ist dabei auch in der Lage, eine Art Raid 1 aufzuziehen. Möglich ist das mit ZFS Mirror. Dabei werden die Daten des Quellpools bei Schreibvorgängen auch auf redundante Pools repliziert. Sollte so ein Gerät ausfallen, können die Daten von der zusätzlichen Hardware gelesen werden. Ein ZFS Mirror ist dabei in der Lage, auch wesentlich mehr als eine redundante Kopie zu erstellen. Wollen wir ein Datenlaufwerk mit zehn redundanten Laufwerken absichern, können wir dies tun. Wir sollten beachten, dass dies natürlich teuer ist. Hier sollten Administratoren abwägen, wie kritisch ihre Daten sind.
Doch wie heißt es in der Welt der IT-Administration: Ein Raid ersetzt kein Backup. Auch hier bietet ZFS eine Lösung an, mit Snapshots des Dateisystems.
Ein Raid ersetzt kein Backup
Doch nicht nur durch Raid eignet sich ZFS gerade für Server und NAS-Systeme. Das Dateisystem unterstützt beispielsweise Snapshots, die den derzeitigen Zustand eines Laufwerks als Backuppunkt abspeichern. Beim initialen Erstellen benötigen Snapshots keinen Platz auf dem Speichermedium. Jedoch wird der benötigte Speicherplatz mit jeder veränderten, erzeugten oder verschobenen Datei innerhalb des vom Snapshot abgedeckten Datensets vergrößert.
Der von Snapshots belegte Speicher ist read only, belegt also permanent Speicher auf dem Datenträger, der nicht modifiziert werden kann. Das ist nur logisch, wollen wir doch keine Inkonsistenzen in Snapshots haben. Denn damit ist es beispielsweise möglich, einen älteren Zustand des abgebildeten Laufwerks wiederherzustellen.
Es sollte allerdings beachtet werden: Da Snapshots phyisch nah an den Quelldaten liegen, sollten wir dies nicht als volles Backup betrachten. Per zfs send und zfs receive können Snapshots auf externe Laufwerke ausgelagert und von dort wieder zurückgespielt werden. Diese Replikationsfunktion ermöglicht ein weitaus effizienteres Backup auf komplett unabhänige und physisch getrennte Storage-Systeme.
ZFS ermöglicht Snapshots, da es ein Copy-on-write-Dateisystem ist. Beim Überschreiben einer Datei kopiert es die neuen Daten zuerst an eine andere Stelle und löscht die ursprünglichen Daten nicht direkt, wie es beispielsweise bei NTFS und ext4 der Fall ist. Sollte das eigene System beim Schreibvorgang abstürzen, ist es so etwa weniger wahrscheinlich, dass Daten verloren gehen.
Allerdings hat dieser Prozess auch einen Nachteil: Ein in ZFS formatiertes Laufwerk sollte nicht zu 100 Prozent mit Daten belegt sein. Administratoren sprechen auch von der 80-Prozent-Regel. Danach sollten 20 Prozent der Festplatte oder SSD frei bleiben. Der Youtube-Channel 45 Drives hat dies wohl bereits getestet und festgestellt, dass die Leistungseinbußen eines ZFS-Laufwerks in der Praxis aber erst ab etwa 85 bis 90 Prozent Belegung auftreten. Trotzdem: Bei großen Applikationen mit vielen physischen Datenträgern - etwa ein großer Fileserver - sollte dies bei einer Kostenrechnung beachtet werden.
Wie andere Dateisysteme auch, nutzt ZFS für die Prüfung gespeicherter Dateien Checksummen - in diesem Fall sind diese 256 Bit groß. Sie werden aber nicht zusammen mit den Daten im gleichen Block abgespeichert. Stattdessen werden sie unabhängig von Dateien abgelegt - in über den Datenblöcken liegenden Eltern-Datenblöcken. Das Dateisystem legt dazu mehrere übergeordnete Blöcke an, in denen Informationen zu den Positionen einzelner Daten und eben deren Checksummen für die Prüfung auf ihre Richtigkeit abgelegt werden.
Jeder Eltern-Block im ZFS-Storage-Pool ist an mehreren Stellen auf dem Datenträger redundant abgelegt und wird seinerseits wieder von der Checksumme in einer Ebene darüber abgesichert. Die Daten selbst sind dabei auf der untersten Ebene des Baumes, den Blättern, abgelegt. Die Wurzel des Baumes ist der sogenannte Überblock, der in sehr vielen Kopien abgelegt wird. Dieses Prinzip wird Merkle-Baum genannt.
Was der Haltbarkeit von SSDs und HDDs zugutekommt, ist die sogenannte Deduplizierung. Mit Hilfe dieser Funktion werden Daten, die bereits an anderer Stelle auf dem Datenträger vorhanden sind, nicht noch einmal komplett neu geschrieben. Stattdessen legt das System einfach nur einen Zeiger an, der auf den Standort der abgelegten Datenblöcke verweist. Das spart Schreibvorgänge und mindert dadurch den Verschleiß der Hardware. Nicht nur ZFS beherrscht diese Technik, allerdings kann es Deduplizierung schon während eines Schreibvorgangs, also inline, durchführen und muss dies nicht im Nachgang mit einem separaten Task erledigen, das kostet allerdings Rechenleistung.
Das Verschlüsseln von Daten auf Laufwerken ist in ZFS genauso möglich wie auf vielen anderen Dateisystemen auch. Es ermöglicht zusätzlich die Kompression von Dateien, beispielsweise durch lz4. Das kann sehr viel Speicherplatz auf den Datenträgern einsparen, benötigt allerdings zusätzliche CPU-Leistung, wie das IT-Magazin Servethehome in der Praxis testen konnte.
Die Alternative für viele Linux-Nutzer ist Btrfs
Wie anfangs erwähnt, ist ZFS derzeit kein Teil eines Linux-Kernels, da es zum einen von Oracle unter geschlossener Lizenz entwickelt wird und zum anderen als OpenZFS-Projekt, an dem dezentral einige Community-Mitglieder arbeiten.
Unter anderem deshalb hat sich das B-Tree File System Btrfs entwickelt, das derzeit Teil von Suse Enterprise Linux ist und seit der Version 12 dort sogar als Standard verwendet wird. Es ist zudem Teil des Linux-Kernels und muss nicht über separat unterstützte Tools installiert werden. Funktional ist das Dateisystem mit ZFS eigentlich identisch, bis auf eine fehlende Inline-Deduplizierung. Auch hier können Raid-Verbunde, Snapshots und Mirroring genutzt werden, wobei auch hier Copy-on-write im Zentrum der Funktionalität steht.
Ein großes Unternehmen, das Btrfs in angepasster Form in seinen eigenen Rechenzentren verwendet, ist Facebook. Das soziale Netzwerk beschäftigt ein ganzes Entwicklerteam, das nur für das Dateisystem zuständig ist. Der Vorteil: Es wird dadurch ständig und täglich und im weitreichenden praktischen Einsatz weiterentwickelt. Obwohl Btrfs noch vergleichsweise jung ist, hat es dadurch Potenzial, in seiner Reife und Stabilität ZFS irgendwann zu überholen.
Derzeit teilen sich die beiden Dateisysteme jedoch ihre Nutzerbasis auf. Free-BSD-Systeme wie Heim-NAS-Server oder einige Geräte von Netzwerkanbietern werden weiterhin ZFS verbreiten. Die Linux-Community verwendet lieber Btrfs. Fakt ist: Beide Dateisysteme sind in Sachen Sicherheit und Datenstabilität anderen Systemen voraus, sei es Microsofts NTFS oder Exfat, ext4 und andere Standards.
Auch Apple entwickelt mit dem Apple File System APFS ein Dateisystem, das einige Funktionen von ZFS und Btrfs unterstützt - allem voran Snapshots und die Copy-on-Write-Mechanik. Was hier fehlt, ist etwa die Möglichkeit, redundante RAID-Systeme aufzuspannen und eine von den Daten unabhängige Fehlererkennung durch Checksummen.
Dort, wo es möglich ist: Administratoren sollten ernsthaft in Betracht ziehen, eines der beiden Dateisysteme in ihrer Netzwerkumgebung zu verwenden. Wie wir erfahren, ist anfangs einige Arbeit notwendig, sich darin zurechtzufinden. Es lohnt sich aber: Wir können mit Snapshots Backups erstellen, können unsere Daten mit einem Dateisystem-Raid redundant speichern und wir können uns sicher sein, dass wir es mit weniger Datenverlust während Schreibvorgängen oder durch Bitkorrumpierung zu tun haben.


",de,"











A file system, all functions
In order to ensure the most redundant and secure data possible, no expensive hardware is required. One reason for this is the ZFS file system. It offers snapshots, secure checksums, own raid levels and other useful functions - but can be overwhelming at the beginning.
04 Nov 2019, 11:05 by Oliver Nickel
Building a system that is as redundant as possible for data security and integrity has for some time now been no longer just a matter of the right raid network. Also the choice of the file system with which information is stored on hard disks and SSDs plays a big role. Systems such as Windows and various Linux distributions use NTFS respectively Ext4 by default, their distribution in IT is correspondingly large.
When it comes to protecting drives against data loss with different methods, however, both file systems come to their limits. For this reason, in the field of network storage and server systems, the Zettabyte File System - ZFS - known. But what distinguishes this in comparison to NTFS and Ext4?
We think: every administrator has to deal with it. However, the system with its many possibilities is very complex, has some limitations and can therefore quickly become confusing. Golem.de gives an overview.
Several features designed to ensure data redundancy-including snapshots, copy-on-write, and file-system managed raid systems-are among ZFS features. Here comes a similar but independently developed file system: the B-Tree File System, Btrfs for short.
Which of the two systems we choose depends on our operating system. ZFS is supported under FreeBSD, which is widely used on various NAS systems. Even the popular NAS OS FreeNAS supports ZFS natively. Golem.de was able to create its own network storage using it in-house. Also, we could try the file system elsewhere.
Where does ZFS come from?
After ZFS was acquired by Oracle as part of the Solaris operating system, the company effectively re-engineered the file system license from open source to a proprietary and closed model and offered no further updates. The concept was therefore further developed with the open source project Illumos, which is based on Opensolaris, later developed again.
Since 2013 the project OpenZFS has been dealing with the further development of the file system. This is a separately available package that is not compatible with the GNU Public License. For this reason, ZFS is compatible with Linux distributions and MacOS, but is not anchored in the Linux kernel and developed there. The system is currently maintained by a community using FreeBSD, Linux, MacOS and Windows.
Raid-Z works without any additional hardware
ZFS is fundamentally different from file systems like NTFS and Ext4. It is a volume manager and file system in one, so it knows physical drives of the host computer and their logical partitions. ZFS, for example, enables a raid function, the so-called Raid-Z. This is in principle a conventional Raid 5 or Raid 6, but with a dynamic striping. ZFS always writes individual blocks as their own stripe. This prevents data loss during the write process, such as when a drive fails or the system becomes corrupted.
A Raid-Z can be defined by users with any number of parity drives, such as one, two or more redundancies. This can be useful, for example, if users do not want to or can not use a raid controller on the motherboard itself or a dedicated controller. ZFS can also be used to create a user-visible logical volume, a virtual device (Vdev), from a simple JBOD array, ie a collection of multiple physical volumes. Usually a Vdef consists of a single hard disk or SSD. The summary of multiple logical drives in ZFS is also called a pool or zpool. They are distributed in stripes across all physical disks defined in it, similar to a RAID 0 system. Oracle itself provides a further overview of the technical terms of ZFS.
ZFS is also able to raise a kind of Raid 1. This is possible with ZFS Mirror. The data of the source pool is also replicated to redundant pools during write operations. Should such a device fail, the data can be read by the additional hardware. A ZFS Mirror is able to create much more than a redundant copy. If we want to secure a data drive with ten redundant drives, we can do that. We should note that this is of course expensive. Here administrators should weigh how critical their data is.
But what about the world of IT administration: A raid does not replace a backup. Again, ZFS offers a solution with snapshots of the file system.
A raid does not replace a backup
But not only by Raid ZFS is suitable for servers and NAS systems. For example, the file system supports snapshots that save the current state of a drive as a backup point. During initial creation, snapshots do not require space on the storage medium. However, the required space is increased with every changed, created, or moved file within the dataset covered by the snapshot.
The memory used by snapshots is read only, so it uses memory permanently on the disk, which can not be modified. That's just logical, because we do not want to have any inconsistencies in snapshots. Because it is for example possible to restore an older state of the mapped drive.
However, it should be noted that since snapshots are physically close to the source data, we should not consider this as a full backup. With zfs send and zfs receive, snapshots can be swapped out to external drives and played back from there. This replication feature enables a much more efficient backup to completely independent and physically separate storage systems.
ZFS enables snapshots because it is a copy-on-write file system. When overwriting a file, it first copies the new data to another location and does not delete the original data directly, as is the case with NTFS and ext4, for example. If one's own system crashes during the write process, it is less likely that data will be lost.
However, this process also has a drawback: a ZFS-formatted drive should not be 100 percent full of data. Administrators also talk about the 80 percent rule. Thereafter, 20 percent of the hard drive or SSD should remain free. The Youtube Channel 45 Drives has probably already tested this and found that the performance losses of a ZFS drive in practice, but only from about 85 to 90 percent occupancy occur. Nevertheless, in large applications with many physical disks - such as a large file server - this should be considered in a cost accounting.
Like other file systems, ZFS uses checksums to check stored files - in this case, they are 256 bits in size. They are not stored together with the data in the same block. Instead, they are stored independently of files - in parent data blocks that lie above the data blocks. For this purpose, the file system creates several higher-level blocks in which information about the positions of individual data and precisely their checksums are checked for accuracy.
Each parent block in the ZFS storage pool is stored redundantly in several places on the data medium and is in turn secured by the checksum in one level above it. The data itself is stored on the lowest level of the tree, the leaves. The root of the tree is the so-called super block, which is deposited in many copies. This principle is called Merkle tree.
What benefits the durability of SSDs and HDDs is the so-called deduplication. This feature will not completely rewrite data that already exists elsewhere on the disk. Instead, the system simply creates a pointer that points to the location of the dropped data blocks. This saves write operations and thereby reduces the wear of the hardware. Not only does ZFS master this technique, but it can perform deduplication during a write operation, ie inline, and does not have to do this later with a separate task, but that costs computing power.
Encrypting data on drives is just as possible in ZFS as on many other file systems. It also allows the compression of files, for example by lz4. This can save a lot of space on the disks, but requires additional CPU power, as the IT magazine Servethehome could test in practice.
The alternative for many Linux users is Btrfs
As mentioned earlier, ZFS is currently not part of a Linux kernel because it is developed by Oracle under a closed license and as an OpenZFS project that has some community members working remotely.
Among other things, the B-tree file system Btrfs has developed, which is currently part of SUSE Enterprise Linux and since the version 12 there is even used as a standard. It is also part of the Linux kernel and does not need to be installed using separately supported tools. Functionally, the file system is actually identical to ZFS, except for a lack of inline deduplication. Again, Raid composites,Snapshots and mirroring, whereby copy-on-write is at the center of functionality as well.
One big company that uses Btrfs in its own custom data center is Facebook. The social network employs a whole developer team dedicated to the file system. The advantage: It is constantly being developed on a daily basis and in far-reaching practical use. Although Btrfs is still relatively young, it has the potential to eventually overtake ZFS in its maturity and stability.
Currently, however, the two file systems share their user base. Free BSD systems such as home NAS servers or some networked devices will continue to distribute ZFS. The Linux community prefers to use Btrfs. The fact is, both file systems are ahead of other systems in terms of security and data stability, whether it's Microsoft's NTFS or Exfat, ext4, and other standards.
Also Apple developed with the Apple File System APFS a file system, which supports some functions of ZFS and Btrfs - above all Snapshots and the Copy on write mechanics. What is missing here, for example, is the option of setting up redundant RAID systems and error-detection independent of the data by means of checksums.
Where possible: Administrators should seriously consider using one of the two file systems in their network environment. As we learn, some work is necessary at first to get used to it. But it's worth it: we can create snapshots with backups, we can save our data redundantly with a file system raid and we can be sure that we are dealing with less data loss during writes or through bit corruption.


"
